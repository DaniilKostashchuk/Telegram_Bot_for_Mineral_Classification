# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_MODEL, PROCESSING_PHOTO = range(2)

class MineralClassifierBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.mineral_model = ort.InferenceSession('efficientnet_minet.onnx')
        self.section_model = ort.InferenceSession('efficientnet_sections.onnx')
        
        # –ö–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        self.mineral_classes = ['biotite', 'bornite', 'chrysocolla', 'malachite', 'muscovite', 'pyrite', 'quartz']
        self.section_classes = ['–ë–∞–∑–∞–ª—å—Ç–æ–∏–¥—ã', '–ì—Ä–∞–Ω–∏—Ç–æ–∏–¥—ã']
        
        # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        self.current_model = None
        self.current_model_name = None
        self.current_classes = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        self.app = Application.builder().token("–í–ê–®_–¢–û–ö–ï–ù").build()
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        self.model_selection_keyboard = [
            ["–ú–∏–Ω–µ—Ä–∞–ª—ã", "–®–ª–∏—Ñ—ã"],
            ["/stop"]
        ]
        self.model_selection_markup = ReplyKeyboardMarkup(self.model_selection_keyboard, one_time_keyboard=True)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        self.photo_processing_keyboard = [
            ["–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"],
            ["/stop"]
        ]
        self.photo_processing_markup = ReplyKeyboardMarkup(self.photo_processing_keyboard, one_time_keyboard=True)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                CHOOSING_MODEL: [
                    MessageHandler(filters.Regex("^(–ú–∏–Ω–µ—Ä–∞–ª—ã|–®–ª–∏—Ñ—ã)$"), self.choose_model),
                ],
                PROCESSING_PHOTO: [
                    MessageHandler(filters.PHOTO, self.handle_photo),
                    MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é$"), self.back_to_model_selection),
                ],
            },
            fallbacks=[CommandHandler('stop', self.stop)],
        )
        
        self.app.add_handler(conv_handler)
        self.app.add_handler(CommandHandler("stop", self.stop))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        self.running = True
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            reply_markup=self.model_selection_markup
        )
        return CHOOSING_MODEL

    async def choose_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        choice = update.message.text
        if choice == "–ú–∏–Ω–µ—Ä–∞–ª—ã":
            self.current_model = self.mineral_model
            self.current_model_name = "–º–∏–Ω–µ—Ä–∞–ª–æ–≤"
            self.current_classes = self.mineral_classes
        else:
            self.current_model = self.section_model
            self.current_model_name = "—à–ª–∏—Ñ–æ–≤"
            self.current_classes = self.section_classes
            
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {self.current_model_name}. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é' –¥–ª—è —Å–º–µ–Ω—ã —Ç–∏–ø–∞.",
            reply_markup=self.photo_processing_markup
        )
        return PROCESSING_PHOTO

    async def back_to_model_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            reply_markup=self.model_selection_markup
        )
        return CHOOSING_MODEL

    async def stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è graceful shutdown"""
        self.running = False
        await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.shutdown()
        return ConversationHandler.END

    def preprocess_image(self, image_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª—è –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π)"""
        transform = transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        image = Image.open(image_path).convert('RGB')
        return transform(image).unsqueeze(0).numpy()

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not self.running:
            await update.message.reply_text("‚ùå –ë–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        if not self.current_model:
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
            photo_file = await update.message.photo[-1].get_file()
            temp_file = 'temp_photo.jpg'
            await photo_file.download_to_drive(temp_file)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            input_data = self.preprocess_image(temp_file)
            input_name = self.current_model.get_inputs()[0].name
            outputs = self.current_model.run(None, {input_name: input_data})[0]
            predicted_class = np.argmax(outputs, axis=1)[0]
            class_name = self.current_classes[predicted_class]
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            image = Image.open(temp_file)
            plt.figure(figsize=(8, 8))
            plt.imshow(image)
            plt.title(f"Predicted: {class_name}", fontsize=16)
            plt.axis('off')
            result_path = 'result.jpg'
            plt.savefig(result_path, bbox_inches='tight', pad_inches=0.1, dpi=150)
            plt.close()
            
            await update.message.reply_photo(
                photo=open(result_path, 'rb'),
                caption=f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç ({self.current_model_name}): {class_name}",
                reply_markup=self.photo_processing_markup
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            os.remove(temp_file)
            os.remove(result_path)
            
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            return PROCESSING_PHOTO
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if os.path.exists(temp_file):
                os.remove(temp_file)
            return PROCESSING_PHOTO

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:\n1. –ù–∞–∂–º–∏—Ç–µ Ctrl+C\n2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop –≤ —á–∞—Ç")
        
        while self.running:
            await asyncio.sleep(1)

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'app') and self.app.running:
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    bot = MineralClassifierBot()
    try:
        await bot.run()
    except (asyncio.CancelledError, KeyboardInterrupt):
        await bot.shutdown()
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.shutdown()

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(main())
        else:
            asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
